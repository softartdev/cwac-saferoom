import com.vanniktech.maven.publish.AndroidSingleVariantLibrary
import com.vanniktech.maven.publish.SonatypeHost

plugins {
    id 'com.android.library'
    id 'com.vanniktech.maven.publish'
    id 'signing'
}

android {
    namespace "com.commonsware.cwac.saferoom"
    compileSdkVersion 36
    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 36
        testApplicationId "com.commonsware.cwac.saferoom.test"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
}

dependencies {
    api "net.zetetic:sqlcipher-android:4.10.0"
    api "androidx.sqlite:sqlite:2.6.1"
    def roomVer = "2.8.1"
    androidTestAnnotationProcessor "androidx.room:room-compiler:$roomVer"
    androidTestImplementation "androidx.test:rules:1.7.0"
    androidTestImplementation "androidx.test.ext:junit:1.3.0"
    androidTestImplementation "androidx.test:core:1.7.0"
    androidTestImplementation "com.commonsware.misc:support.db.tests.x:0.4.5"
    androidTestImplementation("androidx.room:room-runtime:$roomVer") {
        exclude group: 'androidx.annotation', module: 'annotation'
    }
    androidTestImplementation "junit:junit:4.13.2"
}

// Workaround for vanniktech plugin build service cleanup issue
// See: https://github.com/vanniktech/gradle-maven-publish-plugin/issues/1116
void ensureGlobalGradleProperties() {
    def userGradleDir = gradle.gradleUserHomeDir
    def globalPropsFile = new File(userGradleDir, "gradle.properties")
    
    if (!globalPropsFile.exists()) {
        globalPropsFile.parentFile.mkdirs()
        globalPropsFile.createNewFile()
    }
    
    def globalProps = new Properties()
    globalPropsFile.withInputStream { globalProps.load(it) }
    
    // Load local.properties to get Maven Central credentials
    def localProperties = new Properties()
    def localPropertiesFile = rootProject.file('local.properties')
    if (localPropertiesFile.exists()) {
        localPropertiesFile.withInputStream { localProperties.load(it) }
        
        // Copy Maven Central credentials to global gradle.properties if not present
        ['mavenCentralUsername', 'mavenCentralPassword'].each { key ->
            def value = localProperties.getProperty(key)
            if (value && !globalProps.containsKey(key)) {
                globalProps.setProperty(key, value)
            }
        }
        
        // Save global properties
        globalPropsFile.withOutputStream { globalProps.store(it, "Auto-generated by cwac-saferoom build") }
    }
}

// Configure signing properties for Maven Central publishing
// Load local.properties and convert to vanniktech plugin format
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withInputStream { localProperties.load(it) }
    
    // Set Maven Central credentials as project properties
    def mavenCentralUsername = localProperties.getProperty('mavenCentralUsername')
    def mavenCentralPassword = localProperties.getProperty('mavenCentralPassword')
    if (mavenCentralUsername) ext["mavenCentralUsername"] = mavenCentralUsername
    if (mavenCentralPassword) ext["mavenCentralPassword"] = mavenCentralPassword
    
    // Convert signing properties to vanniktech plugin format
    def signingKeyId = localProperties.getProperty('signing.keyId')
    def signingPassword = localProperties.getProperty('signing.password')
    def signingKeyRingFile = localProperties.getProperty('signing.secretKeyRingFile')
    
    if (signingKeyId && signingPassword && signingKeyRingFile) {
        def keyFile = rootProject.file(signingKeyRingFile)
        if (keyFile.exists()) {
            // Convert the binary keyring to base64 for in-memory use
            def keyContent = keyFile.bytes.encodeBase64().toString()
            ext["signingInMemoryKey"] = keyContent
            ext["signingInMemoryKeyId"] = signingKeyId
            ext["signingInMemoryKeyPassword"] = signingPassword
        }
    }
}

// Apply the workaround for build service cleanup
ensureGlobalGradleProperties()

// Maven Central Publishing Configuration
mavenPublishing {
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)
    signAllPublications()
    
    coordinates(PUBLISH_GROUP_ID, PUBLISH_ARTIFACT_ID, PUBLISH_VERSION)
    
    // Configure which Android variant to publish
    configure(new AndroidSingleVariantLibrary("release", true, true))
    
    pom {
        name = 'CWAC SafeRoom'
        description = 'Room Integration with SQLCipher for Android'
        inceptionYear = '2017'
        url = 'https://github.com/softartdev/cwac-saferoom'
        
        licenses {
            license {
                name = 'The Apache Software License, Version 2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution = 'repo'
            }
        }
        
        developers {
            developer {
                id = 'commonsguy'
                name = 'Mark Murphy'
                email = 'mmurphy@commonsware.com'
            }
            developer {
                id = 'softartdev'
                name = 'Artur Babichev'
                email = 'artik222012@gmail.com'
            }
        }
        
        scm {
            url = 'https://github.com/softartdev/cwac-saferoom'
            connection = 'scm:git:git://github.com/softartdev/cwac-saferoom.git'
            developerConnection = 'scm:git:ssh://git@github.com/softartdev/cwac-saferoom.git'
        }
    }
}